//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `calculator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public class PowSeq implements java.lang.Cloneable,
                               java.io.Serializable
{
    public int exponent;

    public int[] seq;

    public PowSeq()
    {
    }

    public PowSeq(int exponent, int[] seq)
    {
        this.exponent = exponent;
        this.seq = seq;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        PowSeq r = null;
        if(rhs instanceof PowSeq)
        {
            r = (PowSeq)rhs;
        }

        if(r != null)
        {
            if(this.exponent != r.exponent)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.seq, r.seq))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Demo::PowSeq");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, exponent);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, seq);
        return h_;
    }

    public PowSeq clone()
    {
        PowSeq c = null;
        try
        {
            c = (PowSeq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.exponent);
        ostr.writeIntSeq(this.seq);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.exponent = istr.readInt();
        this.seq = istr.readIntSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, PowSeq v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public PowSeq ice_read(com.zeroc.Ice.InputStream istr)
    {
        PowSeq v = new PowSeq();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<PowSeq> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, PowSeq v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<PowSeq> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(PowSeq.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final PowSeq _nullMarshalValue = new PowSeq();

    /** @hidden */
    public static final long serialVersionUID = 673977811L;
}
